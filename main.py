import subprocess
import os
import glob
from typing import NamedTuple
import json

lang_to_file_ext = {
	"python3" : "py",
	"python" : "py",
	"java" : "java",
	"cpp" : "cpp",
	"c" : "c",
	"csharp" : "cs",
	"javascript" : "js",
	"ruby" : "rb",
	"swift" : "swift",
	"golang" : "go",
	"scala" : "sc",
	"kotlin" : "kt",
	"rust" : "rs",
	"typescript" : "ts",
	"racket" : "rkt",
	"erlang" : "erl",
	"elixir" : "ex",
	"php" : "php"
}

# Example data from info.txt
example_submission = {
    'code': 
        'class Solution:\n'
        '    def twoSum(self, nums: list[int], target: int) -> list[int]:\n'
        '        d = {}\n'
        '        for k, v in enumerate(nums):\n'
        '            b = d.get(target - v, None)\n'
        '            if b is not None:\n'
        '                return [k, b]\n'
        '            d[v] = k\n',
    'compare_result': '111111111111111111111111111111111111111111111111111111111',
    'flag_type': 1,
    'has_notes': False,
    'id': 123456789,
    'is_pending': 'Not Pending',
    'lang': 'python3',
    'lang_name': 'Python3',
    'memory': '15.3 MB',
    'runtime': '60 ms',
    'status': 10,
    'status_display': 'Accepted',
    'time': '1\xa0year',
    'timestamp': 1659127356,
    'title': 'Two Sum',
    'title_slug': 'two-sum',
    'url': '/submissions/detail/123456789/'
}

class Submission(NamedTuple):
    code: str
    id: int
    lang: str
    timestamp: int
    title_slug: str
        

def get_all_accepted_submissions():
    """Reads all info.txt information from the default folders. Culls all repeated submissions, since this would cause empty commits."""
    vals = []
    cull_duplicate_code = set()
    location = os.path.join(".", "submissions", "*", "Accepted", "*", "info.txt")
    for path in glob.glob(location):
        with open(path) as f:
            val = json.load(f)
            if val["code"] in cull_duplicate_code:
                continue
            cull_duplicate_code.add(val["code"])
            val = Submission(
                val["code"],
                val["id"],
                val["lang"],
                val["timestamp"],
                val["title_slug"],
            )
            vals.append(val)
    return vals


def write_and_commit_submission(sub: Submission):
    """Writes a single solution and commits it. Warning: Will overwrite."""
    try:
        os.mkdir(sub.title_slug)
    except FileExistsError:
        pass
    target_file = os.path.join(sub.title_slug, "solution." + lang_to_file_ext[sub.lang])
    with open(target_file, mode='w') as f:
        f.write(sub.code)
    subprocess.run(["git", "add", target_file], check=True, text=True)

    os.environ["GIT_AUTHOR_DATE"] = str(sub.timestamp)
    os.environ["GIT_COMMITTER_DATE"] = str(sub.timestamp)
    subprocess.run(["git", "commit", "-m", f"Autogenerated commit for submission {sub.id}"], check=True, text=True)


def write_and_commit_all(target_folder: os.PathLike, subs: list[Submission]):
    """Initializes the git repo with the submissions, then writes and commits all in the right order."""
    not_recognized = { sub.lang for sub in subs if sub.lang not in lang_to_file_ext }
    if not_recognized:
        for lang in not_recognized:
            print(f"No file extension found for: {lang}. Please add to lang_to_file_ext.")
        exit(1)

    try:
        os.mkdir(target_folder)
    except FileExistsError:
        pass

    os.chdir(target_folder)
    subprocess.run(["git", "init"], check=True, text=True)

    subs.sort(key=lambda sub: sub.timestamp)
    for sub in subs:
        write_and_commit_submission(sub)
        

if __name__ == '__main__':
    subs = get_all_accepted_submissions()
    write_and_commit_all(os.path.join("."), subs)
